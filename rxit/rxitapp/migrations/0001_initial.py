# Generated by Django 2.1.3 on 2018-11-23 00:26

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0009_alter_user_last_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('participant_name', models.CharField(default='', max_length=200)),
                ('participant_type', models.CharField(default='', max_length=200)),
                ('participant_index', models.IntegerField(default=0)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Description',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('username', models.CharField(blank=True, default='', max_length=100)),
                ('participant_name', models.CharField(blank=True, default='', max_length=100)),
                ('street', models.CharField(blank=True, default='', max_length=100)),
                ('city', models.CharField(blank=True, default='', max_length=100)),
                ('province', models.CharField(blank=True, default='', max_length=100)),
                ('corporate_type', models.CharField(blank=True, default='', max_length=100)),
                ('pharmacy_mgt_system', models.CharField(blank=True, default='', max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='Dispenser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='rxitapp.Description')),
            ],
        ),
        migrations.CreateModel(
            name='Nester_model',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nester_name', models.CharField(blank=True, default='', max_length=100)),
                ('nester_number', models.FloatField(default=0)),
                ('nester_description', models.CharField(blank=True, default='', max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='Numbers',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('num_parmacists', models.DecimalField(decimal_places=1, default=0, max_digits=3)),
                ('num_reg_tech', models.DecimalField(decimal_places=1, default=0, max_digits=3)),
                ('num_unreg', models.DecimalField(decimal_places=1, default=0, max_digits=3)),
            ],
        ),
        migrations.CreateModel(
            name='Prescriber',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('username', models.CharField(blank=True, default='', max_length=100)),
                ('participant_name', models.CharField(blank=True, default='', max_length=100)),
                ('street', models.CharField(blank=True, default='', max_length=100)),
                ('city', models.CharField(blank=True, default='', max_length=100)),
                ('province', models.CharField(blank=True, default='', max_length=100)),
                ('practice_type', models.CharField(blank=True, default='', max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='RxStats',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('num_am', models.DecimalField(decimal_places=1, default=0, max_digits=4)),
                ('num_pm', models.DecimalField(decimal_places=1, default=0, max_digits=4)),
                ('num_evng', models.DecimalField(decimal_places=1, default=0, max_digits=4)),
                ('num_wend', models.DecimalField(decimal_places=1, default=0, max_digits=4)),
            ],
        ),
        migrations.CreateModel(
            name='Nest_model',
            fields=[
                ('nest_name', models.CharField(blank=True, default='', max_length=100)),
                ('nest_number', models.FloatField(default=0)),
                ('nest_description', models.CharField(blank=True, default='', max_length=100)),
                ('nester_model', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='rxitapp.Nester_model')),
            ],
        ),
        migrations.AddField(
            model_name='dispenser',
            name='numbers',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='rxitapp.Numbers'),
        ),
        migrations.AddField(
            model_name='dispenser',
            name='total_rx',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='rxitapp.RxStats'),
        ),
        migrations.AddField(
            model_name='dispenser',
            name='walk_in_rx',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='rxitapp.RxStats'),
        ),
        migrations.CreateModel(
            name='Test_model',
            fields=[
                ('model_name', models.CharField(blank=True, default='', max_length=100)),
                ('model_number', models.FloatField(default=0)),
                ('nest_model', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='rxitapp.Nest_model')),
            ],
        ),
    ]
